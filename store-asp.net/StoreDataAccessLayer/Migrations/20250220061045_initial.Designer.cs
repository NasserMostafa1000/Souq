// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreDataAccessLayer;

#nullable disable

namespace StoreDataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbcontext))]
    [Migration("20250220061045_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("St")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("AddressId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientsAddresses", (string)null);
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.AdminInfo", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("WhatsAppNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("AdminInfo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Email = "info@website.com",
                            PhoneNumber = "+201098765432",
                            TransactionNumber = "1234567890",
                            WhatsAppNumber = "+201234567890"
                        });
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.CartDetails", b =>
                {
                    b.Property<int>("CartDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartDetailsId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("INT");

                    b.HasKey("CartDetailsId");

                    b.HasIndex("CartId")
                        .HasDatabaseName("IX_CartDetails_CartId");

                    b.HasIndex("ProductDetailsId");

                    b.ToTable("CartsDetails", (string)null);
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Category", b =>
                {
                    b.Property<byte>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = (byte)1,
                            CategoryName = "ملابس"
                        },
                        new
                        {
                            CategoryId = (byte)2,
                            CategoryName = "أحذية"
                        },
                        new
                        {
                            CategoryId = (byte)3,
                            CategoryName = "إكسسوارات"
                        },
                        new
                        {
                            CategoryId = (byte)4,
                            CategoryName = "مجوهرات"
                        },
                        new
                        {
                            CategoryId = (byte)5,
                            CategoryName = "ساعات"
                        },
                        new
                        {
                            CategoryId = (byte)6,
                            CategoryName = "هواتف"
                        },
                        new
                        {
                            CategoryId = (byte)7,
                            CategoryName = "سيارات"
                        },
                        new
                        {
                            CategoryId = (byte)8,
                            CategoryName = "دراجات"
                        },
                        new
                        {
                            CategoryId = (byte)9,
                            CategoryName = "إلكترونيات"
                        },
                        new
                        {
                            CategoryId = (byte)10,
                            CategoryName = "أثاث"
                        },
                        new
                        {
                            CategoryId = (byte)11,
                            CategoryName = "مواد غذائية"
                        },
                        new
                        {
                            CategoryId = (byte)12,
                            CategoryName = "كتب"
                        },
                        new
                        {
                            CategoryId = (byte)13,
                            CategoryName = "ألعاب"
                        },
                        new
                        {
                            CategoryId = (byte)14,
                            CategoryName = "رياضة"
                        },
                        new
                        {
                            CategoryId = (byte)15,
                            CategoryName = "أدوات مكتبية"
                        },
                        new
                        {
                            CategoryId = (byte)16,
                            CategoryName = "أجهزة منزلية"
                        },
                        new
                        {
                            CategoryId = (byte)17,
                            CategoryName = "مستحضرات تجميل"
                        },
                        new
                        {
                            CategoryId = (byte)18,
                            CategoryName = "منتجات العناية الشخصية"
                        },
                        new
                        {
                            CategoryId = (byte)19,
                            CategoryName = "مطبخ"
                        },
                        new
                        {
                            CategoryId = (byte)20,
                            CategoryName = "أدوات تنظيف"
                        },
                        new
                        {
                            CategoryId = (byte)21,
                            CategoryName = "أدوية"
                        },
                        new
                        {
                            CategoryId = (byte)22,
                            CategoryName = "معدات صناعية"
                        },
                        new
                        {
                            CategoryId = (byte)23,
                            CategoryName = "حقائب"
                        },
                        new
                        {
                            CategoryId = (byte)24,
                            CategoryName = "أدوات حدائق"
                        },
                        new
                        {
                            CategoryId = (byte)25,
                            CategoryName = "إضاءة"
                        },
                        new
                        {
                            CategoryId = (byte)26,
                            CategoryName = "أخري"
                        });
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("FirstName");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("SecondName");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Clients_UserId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Colors", b =>
                {
                    b.Property<byte>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ColorId"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("ColorId");

                    b.HasIndex("ColorName")
                        .IsUnique();

                    b.ToTable("Colors", (string)null);

                    b.HasData(
                        new
                        {
                            ColorId = (byte)1,
                            ColorName = "أحمر"
                        },
                        new
                        {
                            ColorId = (byte)2,
                            ColorName = "أزرق"
                        },
                        new
                        {
                            ColorId = (byte)3,
                            ColorName = "أخضر"
                        },
                        new
                        {
                            ColorId = (byte)4,
                            ColorName = "أصفر"
                        },
                        new
                        {
                            ColorId = (byte)5,
                            ColorName = "أسود"
                        },
                        new
                        {
                            ColorId = (byte)6,
                            ColorName = "أبيض"
                        },
                        new
                        {
                            ColorId = (byte)7,
                            ColorName = "رمادي"
                        },
                        new
                        {
                            ColorId = (byte)8,
                            ColorName = "برتقالي"
                        },
                        new
                        {
                            ColorId = (byte)9,
                            ColorName = "بنفسجي"
                        },
                        new
                        {
                            ColorId = (byte)10,
                            ColorName = "وردي"
                        },
                        new
                        {
                            ColorId = (byte)11,
                            ColorName = "بني"
                        },
                        new
                        {
                            ColorId = (byte)12,
                            ColorName = "ذهبي"
                        },
                        new
                        {
                            ColorId = (byte)13,
                            ColorName = "فضي"
                        },
                        new
                        {
                            ColorId = (byte)14,
                            ColorName = "تركواز"
                        },
                        new
                        {
                            ColorId = (byte)15,
                            ColorName = "نيلي"
                        },
                        new
                        {
                            ColorId = (byte)16,
                            ColorName = "كحلي"
                        },
                        new
                        {
                            ColorId = (byte)17,
                            ColorName = "عنابي"
                        },
                        new
                        {
                            ColorId = (byte)18,
                            ColorName = "بيج"
                        },
                        new
                        {
                            ColorId = (byte)19,
                            ColorName = "خردلي"
                        },
                        new
                        {
                            ColorId = (byte)20,
                            ColorName = "فيروزي"
                        },
                        new
                        {
                            ColorId = (byte)21,
                            ColorName = "زهري"
                        },
                        new
                        {
                            ColorId = (byte)22,
                            ColorName = "أرجواني"
                        },
                        new
                        {
                            ColorId = (byte)23,
                            ColorName = "لافندر"
                        },
                        new
                        {
                            ColorId = (byte)24,
                            ColorName = "موف"
                        },
                        new
                        {
                            ColorId = (byte)25,
                            ColorName = "ليموني"
                        },
                        new
                        {
                            ColorId = (byte)26,
                            ColorName = "أخضر زيتي"
                        },
                        new
                        {
                            ColorId = (byte)27,
                            ColorName = "أخضر فاتح"
                        },
                        new
                        {
                            ColorId = (byte)28,
                            ColorName = "أزرق سماوي"
                        },
                        new
                        {
                            ColorId = (byte)29,
                            ColorName = "أزرق ملكي"
                        },
                        new
                        {
                            ColorId = (byte)30,
                            ColorName = "قرمزي"
                        });
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailsId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("INT");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL");

                    b.HasKey("OrderDetailsId");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("IX_OrderDetails_OrderId");

                    b.HasIndex("ProductDetailsId")
                        .HasDatabaseName("IX_OrderDetails_ProductDetailsId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.OrderStatus", b =>
                {
                    b.Property<byte>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("OrderStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus", (string)null);

                    b.HasData(
                        new
                        {
                            OrderStatusId = (byte)1,
                            StatusName = "قيد المعالجة"
                        },
                        new
                        {
                            OrderStatusId = (byte)2,
                            StatusName = "تم التأكيد"
                        },
                        new
                        {
                            OrderStatusId = (byte)3,
                            StatusName = "قيد الشحن"
                        },
                        new
                        {
                            OrderStatusId = (byte)4,
                            StatusName = "تم التوصيل"
                        },
                        new
                        {
                            OrderStatusId = (byte)5,
                            StatusName = "تم الإلغاء"
                        },
                        new
                        {
                            OrderStatusId = (byte)6,
                            StatusName = "تم الإرجاع"
                        },
                        new
                        {
                            OrderStatusId = (byte)7,
                            StatusName = "تم الرفض"
                        });
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET() AT TIME ZONE 'Egypt Standard Time'");

                    b.Property<byte>("OrderStatusId")
                        .HasColumnType("TINYINT");

                    b.Property<byte>("PaymentMethodId")
                        .HasColumnType("TINYINT");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<decimal>("ShippingCoast")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IX_Orders_ClientId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.PaymentsMethods", b =>
                {
                    b.Property<byte>("MethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("MethodId"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("MethodId");

                    b.ToTable("PaymentMethods", (string)null);

                    b.HasData(
                        new
                        {
                            MethodId = (byte)1,
                            Method = "المحفظة الإلكترونية"
                        },
                        new
                        {
                            MethodId = (byte)2,
                            Method = "الدفع عند الاستلام"
                        });
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<byte>("CategoryId")
                        .HasColumnType("TINYINT");

                    b.Property<decimal>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("DECIMAL")
                        .HasDefaultValue(0m);

                    b.Property<string>("MoreDetails")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("NVARCHAR");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.ProductsDetails", b =>
                {
                    b.Property<int>("ProductDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDetailsId"));

                    b.Property<byte>("ColorId")
                        .HasColumnType("TINYINT");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Quantity")
                        .HasColumnType("INT");

                    b.Property<byte?>("SizeId")
                        .HasColumnType("TINYINT");

                    b.HasKey("ProductDetailsId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_ProductDetails_ProductId");

                    b.HasIndex("SizeId");

                    b.HasIndex("ColorId", "ProductId")
                        .HasDatabaseName("IX_ProductDetails_ColorId_productId");

                    b.HasIndex("ColorId", "SizeId", "ProductDetailsId")
                        .HasDatabaseName("IX_ProductDetails_ColorId_SizeId_ProductId");

                    b.ToTable("ProductsDetails", (string)null);
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Roles", b =>
                {
                    b.Property<byte>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("VARCHAR");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = (byte)1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = (byte)2,
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = (byte)3,
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = (byte)4,
                            RoleName = "Shipping Manager"
                        });
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.ShippingCoasts", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("TINYINT");

                    b.Property<string>("GovernorateName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("NVARCHAR");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL");

                    b.HasKey("Id");

                    b.ToTable("ShipPrices");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            GovernorateName = "القاهرة",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = (byte)2,
                            GovernorateName = "الجيزة",
                            Price = 55.00m
                        },
                        new
                        {
                            Id = (byte)3,
                            GovernorateName = "الإسكندرية",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = (byte)4,
                            GovernorateName = "القليوبية",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = (byte)5,
                            GovernorateName = "الغربية",
                            Price = 48.00m
                        },
                        new
                        {
                            Id = (byte)6,
                            GovernorateName = "الشرقية",
                            Price = 52.00m
                        },
                        new
                        {
                            Id = (byte)7,
                            GovernorateName = "الدقهلية",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = (byte)8,
                            GovernorateName = "البحيرة",
                            Price = 58.00m
                        },
                        new
                        {
                            Id = (byte)9,
                            GovernorateName = "المنوفية",
                            Price = 47.00m
                        },
                        new
                        {
                            Id = (byte)10,
                            GovernorateName = "بني سويف",
                            Price = 53.00m
                        },
                        new
                        {
                            Id = (byte)11,
                            GovernorateName = "الفيوم",
                            Price = 49.00m
                        },
                        new
                        {
                            Id = (byte)12,
                            GovernorateName = "المنيا",
                            Price = 55.00m
                        },
                        new
                        {
                            Id = (byte)13,
                            GovernorateName = "سوهاج",
                            Price = 57.00m
                        },
                        new
                        {
                            Id = (byte)14,
                            GovernorateName = "أسيوط",
                            Price = 56.00m
                        },
                        new
                        {
                            Id = (byte)15,
                            GovernorateName = "قنا",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = (byte)16,
                            GovernorateName = "الأقصر",
                            Price = 65.00m
                        },
                        new
                        {
                            Id = (byte)17,
                            GovernorateName = "أسوان",
                            Price = 68.00m
                        },
                        new
                        {
                            Id = (byte)18,
                            GovernorateName = "دمياط",
                            Price = 62.00m
                        },
                        new
                        {
                            Id = (byte)19,
                            GovernorateName = "بورسعيد",
                            Price = 58.00m
                        },
                        new
                        {
                            Id = (byte)20,
                            GovernorateName = "الإسماعيلية",
                            Price = 55.00m
                        },
                        new
                        {
                            Id = (byte)21,
                            GovernorateName = "السويس",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = (byte)22,
                            GovernorateName = "شمال سيناء",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = (byte)23,
                            GovernorateName = "جنوب سيناء",
                            Price = 72.00m
                        },
                        new
                        {
                            Id = (byte)24,
                            GovernorateName = "مرسى مطروح",
                            Price = 75.00m
                        },
                        new
                        {
                            Id = (byte)25,
                            GovernorateName = "البحر الأحمر",
                            Price = 80.00m
                        },
                        new
                        {
                            Id = (byte)26,
                            GovernorateName = "كفر الشيخ",
                            Price = 58.00m
                        },
                        new
                        {
                            Id = (byte)27,
                            GovernorateName = "الوادي الجديد",
                            Price = 85.00m
                        });
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Sizes", b =>
                {
                    b.Property<byte>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("SizeId"));

                    b.Property<string>("SizeCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes", (string)null);

                    b.HasData(
                        new
                        {
                            SizeId = (byte)1,
                            SizeCategory = "ملابس",
                            SizeName = "S"
                        },
                        new
                        {
                            SizeId = (byte)2,
                            SizeCategory = "ملابس",
                            SizeName = "M"
                        },
                        new
                        {
                            SizeId = (byte)3,
                            SizeCategory = "ملابس",
                            SizeName = "L"
                        },
                        new
                        {
                            SizeId = (byte)4,
                            SizeCategory = "ملابس",
                            SizeName = "XL"
                        },
                        new
                        {
                            SizeId = (byte)5,
                            SizeCategory = "ملابس",
                            SizeName = "XXL"
                        },
                        new
                        {
                            SizeId = (byte)6,
                            SizeCategory = "ملابس",
                            SizeName = "XXXL"
                        },
                        new
                        {
                            SizeId = (byte)7,
                            SizeCategory = "ملابس",
                            SizeName = "XXXXL"
                        },
                        new
                        {
                            SizeId = (byte)8,
                            SizeCategory = "ملابس",
                            SizeName = "XXXXXL"
                        },
                        new
                        {
                            SizeId = (byte)9,
                            SizeCategory = "حماله صدر",
                            SizeName = "A"
                        },
                        new
                        {
                            SizeId = (byte)10,
                            SizeCategory = "حماله صدر",
                            SizeName = "B"
                        },
                        new
                        {
                            SizeId = (byte)11,
                            SizeCategory = "حماله صدر",
                            SizeName = "C"
                        },
                        new
                        {
                            SizeId = (byte)12,
                            SizeCategory = "حماله صدر",
                            SizeName = "D"
                        },
                        new
                        {
                            SizeId = (byte)13,
                            SizeCategory = "حماله صدر",
                            SizeName = "E"
                        },
                        new
                        {
                            SizeId = (byte)14,
                            SizeCategory = "حماله صدر",
                            SizeName = "F"
                        },
                        new
                        {
                            SizeId = (byte)15,
                            SizeCategory = "بناطيل",
                            SizeName = "22"
                        },
                        new
                        {
                            SizeId = (byte)16,
                            SizeCategory = "بناطيل",
                            SizeName = "23"
                        },
                        new
                        {
                            SizeId = (byte)17,
                            SizeCategory = "بناطيل",
                            SizeName = "24"
                        },
                        new
                        {
                            SizeId = (byte)18,
                            SizeCategory = "بناطيل",
                            SizeName = "25"
                        },
                        new
                        {
                            SizeId = (byte)19,
                            SizeCategory = "بناطيل",
                            SizeName = "26"
                        },
                        new
                        {
                            SizeId = (byte)20,
                            SizeCategory = "بناطيل",
                            SizeName = "27"
                        },
                        new
                        {
                            SizeId = (byte)21,
                            SizeCategory = "بناطيل",
                            SizeName = "28"
                        },
                        new
                        {
                            SizeId = (byte)22,
                            SizeCategory = "بناطيل",
                            SizeName = "29"
                        },
                        new
                        {
                            SizeId = (byte)23,
                            SizeCategory = "بناطيل",
                            SizeName = "30"
                        },
                        new
                        {
                            SizeId = (byte)24,
                            SizeCategory = "بناطيل",
                            SizeName = "31"
                        },
                        new
                        {
                            SizeId = (byte)25,
                            SizeCategory = "بناطيل",
                            SizeName = "32"
                        },
                        new
                        {
                            SizeId = (byte)26,
                            SizeCategory = "بناطيل",
                            SizeName = "33"
                        },
                        new
                        {
                            SizeId = (byte)27,
                            SizeCategory = "بناطيل",
                            SizeName = "34"
                        },
                        new
                        {
                            SizeId = (byte)28,
                            SizeCategory = "بناطيل",
                            SizeName = "35"
                        },
                        new
                        {
                            SizeId = (byte)29,
                            SizeCategory = "بناطيل/احذيه",
                            SizeName = "36"
                        },
                        new
                        {
                            SizeId = (byte)30,
                            SizeCategory = "بناطيل/احذيه",
                            SizeName = "37"
                        },
                        new
                        {
                            SizeId = (byte)31,
                            SizeCategory = "بناطيل/احذيه",
                            SizeName = "38"
                        },
                        new
                        {
                            SizeId = (byte)32,
                            SizeCategory = "بناطيل/احذيه",
                            SizeName = "39"
                        },
                        new
                        {
                            SizeId = (byte)33,
                            SizeCategory = "بناطيل/احذيه",
                            SizeName = "40"
                        },
                        new
                        {
                            SizeId = (byte)34,
                            SizeCategory = "بناطيل/احذيه",
                            SizeName = "41"
                        },
                        new
                        {
                            SizeId = (byte)35,
                            SizeCategory = "بناطيل/احذيه",
                            SizeName = "42"
                        },
                        new
                        {
                            SizeId = (byte)36,
                            SizeCategory = "بناطيل/احذيه",
                            SizeName = "43"
                        },
                        new
                        {
                            SizeId = (byte)37,
                            SizeCategory = "بناطيل/احذيه",
                            SizeName = "44"
                        });
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AuthProvider")
                        .HasMaxLength(85)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET() AT TIME ZONE 'Egypt Standard Time'");

                    b.Property<string>("EmailOrAuthId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<byte>("RoleId")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Salt")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("UserId");

                    b.HasIndex("EmailOrAuthId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Address", b =>
                {
                    b.HasOne("StoreDataAccessLayer.Entities.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Cart", b =>
                {
                    b.HasOne("StoreDataAccessLayer.Entities.Client", "Client")
                        .WithOne("Cart")
                        .HasForeignKey("StoreDataAccessLayer.Entities.Cart", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.CartDetails", b =>
                {
                    b.HasOne("StoreDataAccessLayer.Entities.Cart", "Cart")
                        .WithMany("cartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataAccessLayer.Entities.ProductsDetails", "productDetails")
                        .WithMany("cartsDetails")
                        .HasForeignKey("ProductDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("productDetails");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Client", b =>
                {
                    b.HasOne("StoreDataAccessLayer.Entities.Users", "User")
                        .WithOne("Client")
                        .HasForeignKey("StoreDataAccessLayer.Entities.Client", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.OrderDetails", b =>
                {
                    b.HasOne("StoreDataAccessLayer.Entities.Orders", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StoreDataAccessLayer.Entities.ProductsDetails", "ProductDetails")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("ProductDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Orders", b =>
                {
                    b.HasOne("StoreDataAccessLayer.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataAccessLayer.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataAccessLayer.Entities.PaymentsMethods", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Product", b =>
                {
                    b.HasOne("StoreDataAccessLayer.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.ProductsDetails", b =>
                {
                    b.HasOne("StoreDataAccessLayer.Entities.Colors", "Color")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataAccessLayer.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataAccessLayer.Entities.Sizes", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId");

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Users", b =>
                {
                    b.HasOne("StoreDataAccessLayer.Entities.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Cart", b =>
                {
                    b.Navigation("cartDetails");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Colors", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Orders", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.PaymentsMethods", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Product", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.ProductsDetails", b =>
                {
                    b.Navigation("OrdersDetails");

                    b.Navigation("cartsDetails");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Sizes", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("StoreDataAccessLayer.Entities.Users", b =>
                {
                    b.Navigation("Client");
                });
#pragma warning restore 612, 618
        }
    }
}
